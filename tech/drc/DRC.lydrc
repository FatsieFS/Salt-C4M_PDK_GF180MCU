<?xml version='1.0' encoding='utf-8'?>
<klayout-macro><description /><version /><category>drc</category><prolog /><epilog /><doc /><autorun>false</autorun><autorun-early>false</autorun-early><shortcut /><show-in-menu>true</show-in-menu><group-name>drc_scripts</group-name><menu-path>tools_menu.drc.end</menu-path><interpreter>dsl</interpreter><dsl-interpreter-name>drc-dsl-xml</dsl-interpreter-name><text># Autogenerated file. Changes will be overwritten.

report("C4M.GF180MCU DRC")

def width_check(layer, w)
    small = layer.width(w).polygons
    big = layer.sized(-0.5*w).size(0.5*w)

    small | big
end

def space4width_check(layer, w, s)
    big = layer.sized(-0.5*w).size(0.5*w)
    big.edges.separation(layer.edges, s)
end

def space4widthlength_check(layer, w, l, s)
    big = layer.sized(-0.5*w).size(0.5*w)
    big.edges.separation(layer.edges, s).with_length(l + 1.dbu, nil)
end

def oppenc_check(inner, outer, min, max)
    toosmall = outer.enclosing(inner, min).second_edges

    smallenc = outer.enclosing(inner, max - 1.dbu, projection).second_edges
    # These edges may not touch each other
    touching = smallenc.width(1.dbu, angle_limit(100)).edges

    inner.interacting(toosmall + touching)
end

def extend_check(base, extend, e)
    extend.enclosing(base, e).first_edges.not_interacting(base)
end

def dens_check(output, input, min, max)
    tp = RBA::TilingProcessor::new

    tp.output("res", output.data)
    tp.input("input", input.data)
    tp.dbu = 1.dbu  # establish the real database unit
    tp.var("vmin", min)
    tp.var("vmax", max)

    tp.queue("_tile &amp;&amp; (var d = to_f(input.area(_tile.bbox)) / to_f(_tile.bbox.area); (d &lt; vmin || d &gt; vmax) &amp;&amp; _output(res, _tile.bbox))")
    tp.execute("Density check")
end

# Define layers
Nwell = input(21, 0)
Nplus = input(32, 0)
Pplus = input(31, 0)
Dualgate = input(55, 0)
COMP = input(22, 0)
Poly2 = input(30, 0)
Metal1_Label = input(34, 10)
Metal1 = input(34, 0)
Metal2_Label = input(36, 10)
Metal2 = input(36, 0)
Metal3_Label = input(42, 10)
Metal3 = input(42, 0)
Metal4_Label = input(46, 10)
Metal4 = input(46, 0)
Metal5_Label = input(81, 10)
Metal5 = input(81, 0)
MetalTop_Label = input(53, 10)
MetalTop = input(53, 0)
Contact = input(33, 0)
Via1 = input(35, 0)
Via2 = input(38, 0)
Via3 = input(40, 0)
Via4 = input(41, 0)
Via5 = input(82, 0)
V5_XTOR = input(112, 1)

# Grid check
Nwell.ongrid(0.005).output(
    "Nwell grid", "Nwell grid: 0.005µm"
)
Nplus.ongrid(0.005).output(
    "Nplus grid", "Nplus grid: 0.005µm"
)
Pplus.ongrid(0.005).output(
    "Pplus grid", "Pplus grid: 0.005µm"
)
Dualgate.ongrid(0.005).output(
    "Dualgate grid", "Dualgate grid: 0.005µm"
)
COMP.ongrid(0.005).output(
    "COMP grid", "COMP grid: 0.005µm"
)
Poly2.ongrid(0.005).output(
    "Poly2 grid", "Poly2 grid: 0.005µm"
)
Metal1_Label.ongrid(0.005).output(
    "Metal1_Label grid", "Metal1_Label grid: 0.005µm"
)
Metal1.ongrid(0.005).output(
    "Metal1 grid", "Metal1 grid: 0.005µm"
)
Metal2_Label.ongrid(0.005).output(
    "Metal2_Label grid", "Metal2_Label grid: 0.005µm"
)
Metal2.ongrid(0.005).output(
    "Metal2 grid", "Metal2 grid: 0.005µm"
)
Metal3_Label.ongrid(0.005).output(
    "Metal3_Label grid", "Metal3_Label grid: 0.005µm"
)
Metal3.ongrid(0.005).output(
    "Metal3 grid", "Metal3 grid: 0.005µm"
)
Metal4_Label.ongrid(0.005).output(
    "Metal4_Label grid", "Metal4_Label grid: 0.005µm"
)
Metal4.ongrid(0.005).output(
    "Metal4 grid", "Metal4 grid: 0.005µm"
)
Metal5_Label.ongrid(0.005).output(
    "Metal5_Label grid", "Metal5_Label grid: 0.005µm"
)
Metal5.ongrid(0.005).output(
    "Metal5 grid", "Metal5 grid: 0.005µm"
)
MetalTop_Label.ongrid(0.005).output(
    "MetalTop_Label grid", "MetalTop_Label grid: 0.005µm"
)
MetalTop.ongrid(0.005).output(
    "MetalTop grid", "MetalTop grid: 0.005µm"
)
Contact.ongrid(0.005).output(
    "Contact grid", "Contact grid: 0.005µm"
)
Via1.ongrid(0.005).output(
    "Via1 grid", "Via1 grid: 0.005µm"
)
Via2.ongrid(0.005).output(
    "Via2 grid", "Via2 grid: 0.005µm"
)
Via3.ongrid(0.005).output(
    "Via3 grid", "Via3 grid: 0.005µm"
)
Via4.ongrid(0.005).output(
    "Via4 grid", "Via4 grid: 0.005µm"
)
Via5.ongrid(0.005).output(
    "Via5 grid", "Via5 grid: 0.005µm"
)
V5_XTOR.ongrid(0.005).output(
    "V5_XTOR grid", "V5_XTOR grid: 0.005µm"
)

# Derived layers
# wafer.remove(Nwell).alias(substrate:GF180MCU)
substrate__GF180MCU = (extent.sized(0.6)-Nwell)
# COMP.remove(Poly2).alias(COMP__conn)
COMP__conn = (COMP-Poly2)
# intersect(COMP__conn,Nplus).alias(COMP__conn:Nplus)
COMP__conn__Nplus = (COMP__conn&amp;Nplus)
# intersect(COMP__conn,Pplus).alias(COMP__conn:Pplus)
COMP__conn__Pplus = (COMP__conn&amp;Pplus)
# intersect(COMP,Poly2,wafer.remove(Dualgate)).alias(gate:fet33gate)
gate__fet33gate = (COMP&amp;Poly2&amp;(extent.sized(0.6)-Dualgate))
# intersect(COMP,Poly2,Dualgate,V5_XTOR).alias(gate:fet5gate)
gate__fet5gate = (COMP&amp;Poly2&amp;Dualgate&amp;V5_XTOR)
# intersect(gate:fet33gate,Nplus).remove(Nwell).alias(gate:mosfet:nfet_03v3)
gate__mosfet__nfet_03v3 = ((gate__fet33gate&amp;Nplus)-Nwell)
# intersect(gate:fet5gate,Nplus).remove(Nwell).alias(gate:mosfet:nfet_05v0)
gate__mosfet__nfet_05v0 = ((gate__fet5gate&amp;Nplus)-Nwell)
# intersect(gate:fet33gate,Pplus,Nwell).alias(gate:mosfet:pfet_03v3)
gate__mosfet__pfet_03v3 = (gate__fet33gate&amp;Pplus&amp;Nwell)
# intersect(gate:fet5gate,Pplus,Nwell).alias(gate:mosfet:pfet_05v0)
gate__mosfet__pfet_05v0 = (gate__fet5gate&amp;Pplus&amp;Nwell)

# Connectivity
# connect(substrate:GF180MCU,wafer)
connect(substrate__GF180MCU, extent.sized(0.6))
# connect(COMP__conn,COMP__conn:Nplus)
connect(COMP__conn, COMP__conn__Nplus)
# connect(COMP__conn:Nplus,Nwell)
connect(COMP__conn__Nplus, Nwell)
# connect(COMP__conn,COMP__conn:Pplus)
connect(COMP__conn, COMP__conn__Pplus)
# connect(COMP__conn:Pplus,substrate:GF180MCU)
connect(COMP__conn__Pplus, substrate__GF180MCU)
# connect(Metal1,Metal1_Label)
connect(Metal1, Metal1_Label)
# connect(Metal2,Metal2_Label)
connect(Metal2, Metal2_Label)
# connect(Metal3,Metal3_Label)
connect(Metal3, Metal3_Label)
# connect(Metal4,Metal4_Label)
connect(Metal4, Metal4_Label)
# connect(Metal5,Metal5_Label)
connect(Metal5, Metal5_Label)
# connect(MetalTop,MetalTop_Label)
connect(MetalTop, MetalTop_Label)
# connect((COMP__conn,Poly2),Contact)
connect(COMP__conn, Contact)
connect(Poly2, Contact)
# connect(Contact,Metal1)
connect(Contact, Metal1)
# connect(Metal1,Via1)
connect(Metal1, Via1)
# connect(Via1,Metal2)
connect(Via1, Metal2)
# connect(Metal2,Via2)
connect(Metal2, Via2)
# connect(Via2,Metal3)
connect(Via2, Metal3)
# connect(Metal3,Via3)
connect(Metal3, Via3)
# connect(Via3,Metal4)
connect(Via3, Metal4)
# connect(Metal4,Via4)
connect(Metal4, Via4)
# connect(Via4,Metal5)
connect(Via4, Metal5)
# connect(Metal5,Via5)
connect(Metal5, Via5)
# connect(Via5,MetalTop)
connect(Via5, MetalTop)

# DRC rules
# Nwell.width &gt;= 0.86
Nwell.width(0.86).output(
    "Nwell width", "Nwell minimum width: 0.86µm"
)
# Nwell.space &gt;= 1.7
Nwell.space(1.7).output(
    "Nwell space", "Nwell minimum space: 1.7µm"
)
# Nplus.width &gt;= 0.4
Nplus.width(0.4).output(
    "Nplus width", "Nplus minimum width: 0.4µm"
)
# Nplus.space &gt;= 0.4
Nplus.space(0.4).output(
    "Nplus space", "Nplus minimum space: 0.4µm"
)
# Nplus.area &gt;= 0.35
Nplus.with_area(nil, 0.35).output(
    "Nplus area", "Nplus minimum area: 0.35µm"
)
# Pplus.width &gt;= 0.4
Pplus.width(0.4).output(
    "Pplus width", "Pplus minimum width: 0.4µm"
)
# Pplus.space &gt;= 0.4
Pplus.space(0.4).output(
    "Pplus space", "Pplus minimum space: 0.4µm"
)
# Pplus.area &gt;= 0.35
Pplus.with_area(nil, 0.35).output(
    "Pplus area", "Pplus minimum area: 0.35µm"
)
# Dualgate.width &gt;= 0.7
Dualgate.width(0.7).output(
    "Dualgate width", "Dualgate minimum width: 0.7µm"
)
# Dualgate.space &gt;= 0.44
Dualgate.space(0.44).output(
    "Dualgate space", "Dualgate minimum space: 0.44µm"
)
# COMP.width &gt;= 0.3
COMP.width(0.3).output(
    "COMP width", "COMP minimum width: 0.3µm"
)
# COMP.space &gt;= 0.28
COMP.space(0.28).output(
    "COMP space", "COMP minimum space: 0.28µm"
)
# COMP.area &gt;= 0.2025
COMP.with_area(nil, 0.2025).output(
    "COMP area", "COMP minimum area: 0.2025µm"
)
# COMP.enclosed_by(Nplus) &gt;= Enclosure(0.16)
Nplus.enclosing(COMP, 0.16).output(
    "Nplus:COMP enclosure",
    "Minimum enclosure of Nplus around COMP: 0.16µm"
)
# COMP.enclosed_by(Pplus) &gt;= Enclosure(0.16)
Pplus.enclosing(COMP, 0.16).output(
    "Pplus:COMP enclosure",
    "Minimum enclosure of Pplus around COMP: 0.16µm"
)
# intersect(Nplus,Pplus).area == 0
(Nplus&amp;Pplus).output("(Nplus&amp;Pplus) empty")
# intersect(COMP,Pplus).enclosed_by(Nwell) &gt;= Enclosure(0.6)
Nwell.enclosing((COMP&amp;Pplus), 0.6).output(
    "Nwell:(COMP&amp;Pplus) enclosure",
    "Minimum enclosure of Nwell around (COMP&amp;Pplus): 0.6µm"
)
# intersect(COMP,Nplus).enclosed_by(Nwell) &gt;= Enclosure(0.16)
Nwell.enclosing((COMP&amp;Nplus), 0.16).output(
    "Nwell:(COMP&amp;Nplus) enclosure",
    "Minimum enclosure of Nwell around (COMP&amp;Nplus): 0.16µm"
)
# intersect(COMP,Nplus).enclosed_by(substrate:GF180MCU) &gt;= Enclosure(0.6)
substrate__GF180MCU.enclosing((COMP&amp;Nplus), 0.6).output(
    "substrate__GF180MCU:(COMP&amp;Nplus) enclosure",
    "Minimum enclosure of substrate__GF180MCU around (COMP&amp;Nplus): 0.6µm"
)
# intersect(COMP,Pplus).enclosed_by(substrate:GF180MCU) &gt;= Enclosure(0.16)
substrate__GF180MCU.enclosing((COMP&amp;Pplus), 0.16).output(
    "substrate__GF180MCU:(COMP&amp;Pplus) enclosure",
    "Minimum enclosure of substrate__GF180MCU around (COMP&amp;Pplus): 0.16µm"
)
# COMP.enclosed_by(Dualgate) &gt;= Enclosure(0.24)
Dualgate.enclosing(COMP, 0.24).output(
    "Dualgate:COMP enclosure",
    "Minimum enclosure of Dualgate around COMP: 0.24µm"
)
# edge(COMP).interact_with(edge(Nwell)).length == 0
COMP.edges.interacting(Nwell.edges).output("COMP.edges.interacting(Nwell.edges) empty")
# Poly2.width &gt;= 0.28
Poly2.width(0.28).output(
    "Poly2 width", "Poly2 minimum width: 0.28µm"
)
# Poly2.space &gt;= 0.24
Poly2.space(0.24).output(
    "Poly2 space", "Poly2 minimum space: 0.24µm"
)
# Metal1.width &gt;= 0.23
Metal1.width(0.23).output(
    "Metal1 width", "Metal1 minimum width: 0.23µm"
)
# Metal1.space &gt;= 0.23
Metal1.space(0.23).output(
    "Metal1 space", "Metal1 minimum space: 0.23µm"
)
# Metal1.area &gt;= 0.1444
Metal1.with_area(nil, 0.1444).output(
    "Metal1 area", "Metal1 minimum area: 0.1444µm"
)
# Metal1.density &gt;= 0.3
Metal1_mindens = polygon_layer
dens_check(Metal1_mindens, Metal1, 0.3, 1)
Metal1_mindens.output(
    "Metal1 density", "Metal1 minimum density: 30%"
)
# space(Metal1.parts_with(Metal1.width &gt;= 10.0),Metal1) &gt;= 0.3
space4width_check(Metal1, 10.0, 0.3).output(
    "Metal1 table spacing",
    "Minimum Metal1 spacing for 10.0µm width: 0.3µm"
)
# Metal2.width &gt;= 0.28
Metal2.width(0.28).output(
    "Metal2 width", "Metal2 minimum width: 0.28µm"
)
# Metal2.space &gt;= 0.28
Metal2.space(0.28).output(
    "Metal2 space", "Metal2 minimum space: 0.28µm"
)
# Metal2.area &gt;= 0.1444
Metal2.with_area(nil, 0.1444).output(
    "Metal2 area", "Metal2 minimum area: 0.1444µm"
)
# Metal2.density &gt;= 0.3
Metal2_mindens = polygon_layer
dens_check(Metal2_mindens, Metal2, 0.3, 1)
Metal2_mindens.output(
    "Metal2 density", "Metal2 minimum density: 30%"
)
# space(Metal2.parts_with(Metal2.width &gt;= 10.0),Metal2) &gt;= 0.3
space4width_check(Metal2, 10.0, 0.3).output(
    "Metal2 table spacing",
    "Minimum Metal2 spacing for 10.0µm width: 0.3µm"
)
# Metal3.width &gt;= 0.28
Metal3.width(0.28).output(
    "Metal3 width", "Metal3 minimum width: 0.28µm"
)
# Metal3.space &gt;= 0.28
Metal3.space(0.28).output(
    "Metal3 space", "Metal3 minimum space: 0.28µm"
)
# Metal3.area &gt;= 0.1444
Metal3.with_area(nil, 0.1444).output(
    "Metal3 area", "Metal3 minimum area: 0.1444µm"
)
# Metal3.density &gt;= 0.3
Metal3_mindens = polygon_layer
dens_check(Metal3_mindens, Metal3, 0.3, 1)
Metal3_mindens.output(
    "Metal3 density", "Metal3 minimum density: 30%"
)
# space(Metal3.parts_with(Metal3.width &gt;= 10.0),Metal3) &gt;= 0.3
space4width_check(Metal3, 10.0, 0.3).output(
    "Metal3 table spacing",
    "Minimum Metal3 spacing for 10.0µm width: 0.3µm"
)
# Metal4.width &gt;= 0.28
Metal4.width(0.28).output(
    "Metal4 width", "Metal4 minimum width: 0.28µm"
)
# Metal4.space &gt;= 0.28
Metal4.space(0.28).output(
    "Metal4 space", "Metal4 minimum space: 0.28µm"
)
# Metal4.area &gt;= 0.1444
Metal4.with_area(nil, 0.1444).output(
    "Metal4 area", "Metal4 minimum area: 0.1444µm"
)
# Metal4.density &gt;= 0.3
Metal4_mindens = polygon_layer
dens_check(Metal4_mindens, Metal4, 0.3, 1)
Metal4_mindens.output(
    "Metal4 density", "Metal4 minimum density: 30%"
)
# space(Metal4.parts_with(Metal4.width &gt;= 10.0),Metal4) &gt;= 0.3
space4width_check(Metal4, 10.0, 0.3).output(
    "Metal4 table spacing",
    "Minimum Metal4 spacing for 10.0µm width: 0.3µm"
)
# Metal5.width &gt;= 0.28
Metal5.width(0.28).output(
    "Metal5 width", "Metal5 minimum width: 0.28µm"
)
# Metal5.space &gt;= 0.28
Metal5.space(0.28).output(
    "Metal5 space", "Metal5 minimum space: 0.28µm"
)
# Metal5.area &gt;= 0.1444
Metal5.with_area(nil, 0.1444).output(
    "Metal5 area", "Metal5 minimum area: 0.1444µm"
)
# Metal5.density &gt;= 0.3
Metal5_mindens = polygon_layer
dens_check(Metal5_mindens, Metal5, 0.3, 1)
Metal5_mindens.output(
    "Metal5 density", "Metal5 minimum density: 30%"
)
# space(Metal5.parts_with(Metal5.width &gt;= 10.0),Metal5) &gt;= 0.3
space4width_check(Metal5, 10.0, 0.3).output(
    "Metal5 table spacing",
    "Minimum Metal5 spacing for 10.0µm width: 0.3µm"
)
# MetalTop.width &gt;= 0.44
MetalTop.width(0.44).output(
    "MetalTop width", "MetalTop minimum width: 0.44µm"
)
# MetalTop.space &gt;= 0.436
MetalTop.space(0.436).output(
    "MetalTop space", "MetalTop minimum space: 0.436µm"
)
# MetalTop.area &gt;= 0.5625
MetalTop.with_area(nil, 0.5625).output(
    "MetalTop area", "MetalTop minimum area: 0.5625µm"
)
# MetalTop.density &gt;= 0.3
MetalTop_mindens = polygon_layer
dens_check(MetalTop_mindens, MetalTop, 0.3, 1)
MetalTop_mindens.output(
    "MetalTop density", "MetalTop minimum density: 30%"
)
# space(MetalTop.parts_with(MetalTop.width &gt;= 10.0),MetalTop) &gt;= 0.6
space4width_check(MetalTop, 10.0, 0.6).output(
    "MetalTop table spacing",
    "Minimum MetalTop spacing for 10.0µm width: 0.6µm"
)
# Contact.width == 0.22
width_check(Contact, 0.22).output(
    "Contact width", "Contact width: 0.22µm"
)
# Contact.space &gt;= 0.28
Contact.space(0.28).output(
    "Contact space", "Contact minimum space: 0.28µm"
)
# Contact.enclosed_by(COMP) &gt;= Enclosure(0.07)
COMP.enclosing(Contact, 0.07).output(
    "COMP:Contact enclosure",
    "Minimum enclosure of COMP around Contact: 0.07µm"
)
# Contact.enclosed_by(Poly2) &gt;= Enclosure(0.07)
Poly2.enclosing(Contact, 0.07).output(
    "Poly2:Contact enclosure",
    "Minimum enclosure of Poly2 around Contact: 0.07µm"
)
# Contact.enclosed_by(Metal1) &gt;= Enclosure((0.06,0.005))
oppenc_check(Contact, Metal1, 0.005, 0.06).output(
    "Metal1:Contact asymmetric enclosure",
    "Minimum enclosure of Metal1 around Contact: 0.005µm minimum, 0.06µm opposite"
)
# Via1.width == 0.26
width_check(Via1, 0.26).output(
    "Via1 width", "Via1 width: 0.26µm"
)
# Via1.space &gt;= 0.36
Via1.space(0.36).output(
    "Via1 space", "Via1 minimum space: 0.36µm"
)
# Via1.enclosed_by(Metal1) &gt;= Enclosure((0.06,0.0))
oppenc_check(Via1, Metal1, 0.0, 0.06).output(
    "Metal1:Via1 asymmetric enclosure",
    "Minimum enclosure of Metal1 around Via1: 0.0µm minimum, 0.06µm opposite"
)
# Via1.enclosed_by(Metal2) &gt;= Enclosure((0.06,0.01))
oppenc_check(Via1, Metal2, 0.01, 0.06).output(
    "Metal2:Via1 asymmetric enclosure",
    "Minimum enclosure of Metal2 around Via1: 0.01µm minimum, 0.06µm opposite"
)
# Via2.width == 0.26
width_check(Via2, 0.26).output(
    "Via2 width", "Via2 width: 0.26µm"
)
# Via2.space &gt;= 0.36
Via2.space(0.36).output(
    "Via2 space", "Via2 minimum space: 0.36µm"
)
# Via2.enclosed_by(Metal2) &gt;= Enclosure((0.06,0.01))
oppenc_check(Via2, Metal2, 0.01, 0.06).output(
    "Metal2:Via2 asymmetric enclosure",
    "Minimum enclosure of Metal2 around Via2: 0.01µm minimum, 0.06µm opposite"
)
# Via2.enclosed_by(Metal3) &gt;= Enclosure((0.06,0.01))
oppenc_check(Via2, Metal3, 0.01, 0.06).output(
    "Metal3:Via2 asymmetric enclosure",
    "Minimum enclosure of Metal3 around Via2: 0.01µm minimum, 0.06µm opposite"
)
# Via3.width == 0.26
width_check(Via3, 0.26).output(
    "Via3 width", "Via3 width: 0.26µm"
)
# Via3.space &gt;= 0.36
Via3.space(0.36).output(
    "Via3 space", "Via3 minimum space: 0.36µm"
)
# Via3.enclosed_by(Metal3) &gt;= Enclosure((0.06,0.01))
oppenc_check(Via3, Metal3, 0.01, 0.06).output(
    "Metal3:Via3 asymmetric enclosure",
    "Minimum enclosure of Metal3 around Via3: 0.01µm minimum, 0.06µm opposite"
)
# Via3.enclosed_by(Metal4) &gt;= Enclosure((0.06,0.01))
oppenc_check(Via3, Metal4, 0.01, 0.06).output(
    "Metal4:Via3 asymmetric enclosure",
    "Minimum enclosure of Metal4 around Via3: 0.01µm minimum, 0.06µm opposite"
)
# Via4.width == 0.26
width_check(Via4, 0.26).output(
    "Via4 width", "Via4 width: 0.26µm"
)
# Via4.space &gt;= 0.36
Via4.space(0.36).output(
    "Via4 space", "Via4 minimum space: 0.36µm"
)
# Via4.enclosed_by(Metal4) &gt;= Enclosure((0.06,0.01))
oppenc_check(Via4, Metal4, 0.01, 0.06).output(
    "Metal4:Via4 asymmetric enclosure",
    "Minimum enclosure of Metal4 around Via4: 0.01µm minimum, 0.06µm opposite"
)
# Via4.enclosed_by(Metal5) &gt;= Enclosure((0.06,0.01))
oppenc_check(Via4, Metal5, 0.01, 0.06).output(
    "Metal5:Via4 asymmetric enclosure",
    "Minimum enclosure of Metal5 around Via4: 0.01µm minimum, 0.06µm opposite"
)
# Via5.width == 0.26
width_check(Via5, 0.26).output(
    "Via5 width", "Via5 width: 0.26µm"
)
# Via5.space &gt;= 0.36
Via5.space(0.36).output(
    "Via5 space", "Via5 minimum space: 0.36µm"
)
# Via5.enclosed_by(Metal5) &gt;= Enclosure((0.06,0.01))
oppenc_check(Via5, Metal5, 0.01, 0.06).output(
    "Metal5:Via5 asymmetric enclosure",
    "Minimum enclosure of Metal5 around Via5: 0.01µm minimum, 0.06µm opposite"
)
# Via5.enclosed_by(MetalTop) &gt;= Enclosure((0.06,0.01))
oppenc_check(Via5, MetalTop, 0.01, 0.06).output(
    "MetalTop:Via5 asymmetric enclosure",
    "Minimum enclosure of MetalTop around Via5: 0.01µm minimum, 0.06µm opposite"
)
# intersect(edge(COMP),edge(gate:fet33gate)).length &gt;= 0.28
(COMP.edges&amp;gate__fet33gate.edges).with_length(nil, 0.28).output(
    "(COMP.edges&amp;gate__fet33gate.edges) length",
    "Minimum length of (COMP.edges&amp;gate__fet33gate.edges): 0.28µm"
)
# intersect(edge(Poly2),edge(gate:fet33gate)).length &gt;= 0.22
(Poly2.edges&amp;gate__fet33gate.edges).with_length(nil, 0.22).output(
    "(Poly2.edges&amp;gate__fet33gate.edges) length",
    "Minimum length of (Poly2.edges&amp;gate__fet33gate.edges): 0.22µm"
)
# COMP.extend_over(gate:fet33gate) &gt;= 0.3
extend_check(gate__fet33gate, COMP, 0.3).output(
    "COMP:gate__fet33gate extension",
    "Minimum extension of COMP of gate__fet33gate: 0.3µm"
)
# Poly2.extend_over(gate:fet33gate) &gt;= 0.22
extend_check(gate__fet33gate, Poly2, 0.22).output(
    "Poly2:gate__fet33gate extension",
    "Minimum extension of Poly2 of gate__fet33gate: 0.22µm"
)
# space(gate:fet33gate,Contact) &gt;= 0.15
gate__fet33gate.separation(Contact, 0.15, square).output(
    "gate__fet33gate:Contact spacing",
    "Minimum spacing between gate__fet33gate and Contact: 0.15µm"
)
# intersect(edge(COMP),edge(gate:fet5gate)).length &gt;= 0.5
(COMP.edges&amp;gate__fet5gate.edges).with_length(nil, 0.5).output(
    "(COMP.edges&amp;gate__fet5gate.edges) length",
    "Minimum length of (COMP.edges&amp;gate__fet5gate.edges): 0.5µm"
)
# COMP.extend_over(gate:fet5gate) &gt;= 0.4
extend_check(gate__fet5gate, COMP, 0.4).output(
    "COMP:gate__fet5gate extension",
    "Minimum extension of COMP of gate__fet5gate: 0.4µm"
)
# Poly2.extend_over(gate:fet5gate) &gt;= 0.22
extend_check(gate__fet5gate, Poly2, 0.22).output(
    "Poly2:gate__fet5gate extension",
    "Minimum extension of Poly2 of gate__fet5gate: 0.22µm"
)
# space(gate:fet5gate,Contact) &gt;= 0.15
gate__fet5gate.separation(Contact, 0.15, square).output(
    "gate__fet5gate:Contact spacing",
    "Minimum spacing between gate__fet5gate and Contact: 0.15µm"
)
# gate:mosfet:nfet_03v3.enclosed_by(Nplus) &gt;= Enclosure(0.23)
Nplus.enclosing(gate__mosfet__nfet_03v3, 0.23).output(
    "Nplus:gate__mosfet__nfet_03v3 enclosure",
    "Minimum enclosure of Nplus around gate__mosfet__nfet_03v3: 0.23µm"
)
# intersect(edge(gate:mosfet:nfet_05v0),edge(COMP)).length &gt;= 0.6
(gate__mosfet__nfet_05v0.edges&amp;COMP.edges).with_length(nil, 0.6).output(
    "(gate__mosfet__nfet_05v0.edges&amp;COMP.edges) length",
    "Minimum length of (gate__mosfet__nfet_05v0.edges&amp;COMP.edges): 0.6µm"
)
# gate:mosfet:nfet_05v0.enclosed_by(Nplus) &gt;= Enclosure(0.23)
Nplus.enclosing(gate__mosfet__nfet_05v0, 0.23).output(
    "Nplus:gate__mosfet__nfet_05v0 enclosure",
    "Minimum enclosure of Nplus around gate__mosfet__nfet_05v0: 0.23µm"
)
# gate:mosfet:pfet_03v3.enclosed_by(Pplus) &gt;= Enclosure(0.23)
Pplus.enclosing(gate__mosfet__pfet_03v3, 0.23).output(
    "Pplus:gate__mosfet__pfet_03v3 enclosure",
    "Minimum enclosure of Pplus around gate__mosfet__pfet_03v3: 0.23µm"
)
# gate:mosfet:pfet_05v0.enclosed_by(Pplus) &gt;= Enclosure(0.23)
Pplus.enclosing(gate__mosfet__pfet_05v0, 0.23).output(
    "Pplus:gate__mosfet__pfet_05v0 enclosure",
    "Minimum enclosure of Pplus around gate__mosfet__pfet_05v0: 0.23µm"
)
# space(COMP,Nwell) &gt;= 0.6
COMP.separation(Nwell, 0.6, square).output(
    "COMP:Nwell spacing",
    "Minimum spacing between COMP and Nwell: 0.6µm"
)
# join(intersect(COMP,Dualgate)).space &gt;= 0.36
((COMP&amp;Dualgate)).space(0.36).output(
    "((COMP&amp;Dualgate)) space", "((COMP&amp;Dualgate)) minimum space: 0.36µm"
)
# intersect(COMP,Dualgate).width &gt;= 0.3
(COMP&amp;Dualgate).width(0.3).output(
    "(COMP&amp;Dualgate) width", "(COMP&amp;Dualgate) minimum width: 0.3µm"
)
# intersect(Poly2,Dualgate).width &gt;= 0.2
(Poly2&amp;Dualgate).width(0.2).output(
    "(Poly2&amp;Dualgate) width", "(Poly2&amp;Dualgate) minimum width: 0.2µm"
)
# space(COMP,Poly2) &gt;= 0.3
COMP.separation(Poly2, 0.3, square).output(
    "COMP:Poly2 spacing",
    "Minimum spacing between COMP and Poly2: 0.3µm"
)
</text></klayout-macro>